# Generated by Django 4.2.7 on 2023-11-21 12:39

import EcoMan.models.analysis_settings
import EcoMan.models.lca_database_process
import EcoMan.models.lca_property
import EcoMan.scripts.colors
from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid
import website.generate_pk


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('ConceptMan', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Analysis',
            fields=[
                ('id', models.CharField(default=website.generate_pk.generate_pk, max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, default='No Name', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('logo', models.CharField(default='Default Analysis Logo', max_length=1000)),
                ('goal_definition', models.CharField(blank=True, default='Not defined', max_length=600)),
                ('scope_definition', models.CharField(blank=True, default='Not defined', max_length=600)),
                ('protection_class', models.CharField(choices=[('PUBLIC', 'Public'), ('INTERNAL', 'Internal'), ('CONFIDENTIAL', 'Confidential'), ('STRICTLY_CONFIDENTIAL', 'Strictly Confidential')], default='CONFIDENTIAL', max_length=100, verbose_name='Report protection class')),
                ('weight', models.FloatField(blank=True, default=0, editable=False, verbose_name='Concept Weight [kg]')),
            ],
        ),
        migrations.CreateModel(
            name='Circularity_Process',
            fields=[
                ('id', models.CharField(default=website.generate_pk.generate_pk, max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, default='Not defined', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lifetimeinkm', models.IntegerField(blank=True, default=150000, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Part lifetime in km')),
                ('ispartreused', models.BooleanField(default=False)),
                ('notes', models.CharField(blank=True, default='Put your comment here...', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Instance_Idemat_Database_Process',
            fields=[
                ('id', models.CharField(default=website.generate_pk.generate_pk, max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, default='Not defined', max_length=100)),
                ('color', models.CharField(default=EcoMan.scripts.colors.get_random_color, max_length=7)),
                ('status', models.CharField(choices=[('GREEN', 'Green'), ('ORANGE', 'Orange'), ('RED', 'Red')], default='GREEN', max_length=32)),
                ('process_type', models.CharField(choices=[('PTYPE0_OTHER', 'Other Processes'), ('PTYPE1_MATERIAL', 'Material Process'), ('PTYPE2_MANUFACTURING_PROCESS', 'Manufacturing Process'), ('PTYPE3_TRANSPORT', 'Transport Process')], default='ES2', max_length=32)),
                ('lca_step', models.CharField(choices=[('LCASTEP1', 'Upstream'), ('LCASTEP2', 'Core'), ('LCASTEP3', 'Downstream'), ('LCASTEP4', 'Circularity')], default='ES2', max_length=32)),
                ('is_active', models.BooleanField(default=True)),
                ('calculation_basis', models.CharField(choices=[('CB1', 'Mass Based'), ('CB2', 'Material removed Based'), ('CB3', 'Surface Based')], default='ES2', max_length=32)),
                ('process_flag', models.CharField(choices=[('MANUAL_INPUT', 'Manual Input (not referenced to LCA Database)'), ('MANUAL_MODIFICATION', 'Manual Modification (referenced to LCA Database)'), ('ORPH_DELETED', 'Orphan Process (Probably Deleted from LCA Database)'), ('ORPH_UNIDENTIFIED', 'Orphan Process (Reference Process not identified during Import)'), ('REF_CORRECT', 'Correctly referenced to LCA Database'), ('PROCESS_CHANGED', 'Process changed in LCA Database')], default='REF_CORRECT', max_length=32)),
                ('calculation_flag', models.CharField(choices=[('PROCESS_QUANTITY_NOTDEF', 'Manual Input (not referenced to LCA Database)'), ('TRANSPORT_DISTANCE_NOTDEF', 'Manual Modification (referenced to LCA Database)'), ('PROPERTY_VALUE_NOTDEF', 'Orphan Process (Probably Deleted from LCA Database)'), ('INPUT_CORRECT', 'Orphan Process (Probably Deleted from LCA Database)'), ('PROCESS_DEACTIVATED', 'Process was deactivated.')], default='INPUT_CORRECT', max_length=32)),
                ('process_quantity', models.FloatField(default=0, verbose_name='Process quantity [-]')),
                ('process_auxiliary_quantity', models.FloatField(default=0, verbose_name='Process quantity [-]')),
                ('process_total_quantity', models.FloatField(default=0, verbose_name='Process quantity [-]')),
                ('transport_distance', models.FloatField(default=0, verbose_name='Transport Distance for Transporting')),
                ('notes', models.CharField(blank=True, help_text='Put your notes and assumptions here', max_length=2000, null=True, verbose_name='Notes')),
            ],
        ),
        migrations.CreateModel(
            name='Lca_Database',
            fields=[
                ('id', models.CharField(default=website.generate_pk.generate_pk, max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, default='Not defined', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('note', models.CharField(blank=True, default='Put your import comment here...', max_length=100)),
                ('logo', models.CharField(blank=True, default='Default Idemat Logo', max_length=1000, null=True)),
                ('accessibility', models.CharField(choices=[('PROJECT', 'Project Related Release'), ('EDAG', 'Official EDAG Release'), ('IDEMAT', 'Official Idemat Release')], default='PROJECT', max_length=32)),
                ('last_import_document', models.FileField(blank=True, null=True, upload_to='documents/', verbose_name='Import processes from an Excel File')),
            ],
        ),
        migrations.CreateModel(
            name='Lca_Database_Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=1, unique=True)),
                ('name', models.CharField(default='Not defined', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.CharField(blank=True, default='Put your comment here...', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Lca_Database_Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=3, validators=[django.core.validators.MinLengthValidator(3)])),
                ('name', models.CharField(default='Not defined', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.CharField(blank=True, default='Put your comment here...', max_length=100)),
                ('category_model', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='EcoMan.lca_database_category', verbose_name='Category of the Group')),
            ],
        ),
        migrations.CreateModel(
            name='Project_EcoMan_Ref',
            fields=[
                ('UUID', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='UUID')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectUser_EcoMan_Ref',
            fields=[
                ('UUID', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='UUID')),
                ('nickname', models.CharField(blank=True, default='Not defined', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle_EcoMan_Ref',
            fields=[
                ('UUID', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='UUID')),
            ],
        ),
        migrations.CreateModel(
            name='Utilisation_Process',
            fields=[
                ('id', models.CharField(default=website.generate_pk.generate_pk, max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, default='Not defined', max_length=100)),
                ('custom_name', models.CharField(blank=True, help_text='Your internal designation of process name', max_length=100, null=True, verbose_name='Custom Process Name')),
                ('notes', models.CharField(blank=True, help_text='Put your notes and assumptions here', max_length=2000, null=True, unique=True, verbose_name='Notes')),
                ('start_time', models.IntegerField(blank=True, null=True, verbose_name='Utilisation Start Time [-] (years after SOP)')),
                ('end_time', models.IntegerField(blank=True, null=True, verbose_name='Utilisation End Time [-] (years after SOP)')),
                ('manufactured_units', models.IntegerField(blank=True, null=True, verbose_name='Manufactured units [-] (units)')),
                ('concept_weight_left', models.FloatField(default=0, verbose_name='Concept Weight [kg]')),
                ('concept_weight_right', models.FloatField(default=0, verbose_name='Concept Weight [kg]')),
                ('vehicle_weight_left', models.FloatField(default=0, verbose_name='Adjusted Vehicle Weight [kg]')),
                ('vehicle_weight_right', models.FloatField(default=0, verbose_name='Adjusted Vehicle Weight [kg]')),
                ('vehicle_weight_delta_left', models.FloatField(default=0, verbose_name='Adjusted Vehicle Weight [kg]')),
                ('vehicle_weight_delta_right', models.FloatField(default=0, verbose_name='Adjusted Vehicle Weight [kg]')),
                ('goods_weight', models.FloatField(default=0, verbose_name='Goods weight [kg]')),
                ('goods_weight_utilisation', models.DecimalField(decimal_places=0, default=Decimal('100'), max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Goods Weight Utilisation [-]')),
                ('engwpperkm_vehicle', models.FloatField(blank=True, null=True, verbose_name='Energy GWP per Km [GWP/km]')),
                ('engwpperkm_vehicle_for_analysis_left', models.FloatField(blank=True, null=True, verbose_name='Energy GWP per Km [GWP/km]')),
                ('engwpperkm_vehicle_for_analysis_right', models.FloatField(blank=True, null=True, verbose_name='Energy GWP per Km [GWP/km]')),
                ('engwpperkm_vehicle_source_1', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Global Warming Potential Primary Source [GWP/l]')),
                ('engwpperkm_vehicle_source_2', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Global Warming Potential Secondary Source [GWP/l]')),
                ('engwpperkm_concept_source_1', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Global Warming Potential Primary Source [GWP/l]')),
                ('engwpperkm_concept_source_2', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Global Warming Potential Secondary Source [GWP/l]')),
                ('estimated_fuel_consumption_source_1_adj', models.FloatField(blank=True, default=0, null=True, verbose_name='Estimated Fuel Consumption [l/100km]')),
                ('estimated_fuel_consumption_source_2_adj', models.FloatField(blank=True, default=0, null=True, verbose_name='Estimated Fuel Consumption [l/100km]')),
                ('estimated_energy_consumption_source_1_adj', models.FloatField(blank=True, default=0, null=True, verbose_name='Estimated Energy Consumption [kWh/100km]')),
                ('estimated_energy_consumption_source_2_adj', models.FloatField(blank=True, default=0, null=True, verbose_name='Estimated Energy Consumption [kWh/100km]')),
                ('status', models.CharField(choices=[('GREEN', 'Green'), ('ORANGE', 'Orange'), ('RED', 'Red')], default='GREEN', max_length=32)),
                ('weight', models.FloatField(blank=True, null=True, verbose_name='Energy GWP per Km [GWP/km]')),
                ('quantity', models.FloatField(default=0, verbose_name='Utilisation Lifetime [km] (only for current usage process)')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='EcoMan.projectuser_ecoman_ref')),
                ('vehicle', models.ForeignKey(blank=True, default=None, help_text='Select vehicle', null=True, on_delete=django.db.models.deletion.SET_NULL, to='EcoMan.vehicle_ecoman_ref', verbose_name='Vehicle')),
            ],
        ),
        migrations.CreateModel(
            name='Lca_Support_Ticket',
            fields=[
                ('id', models.CharField(default=website.generate_pk.generate_pk, max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, default='No Name', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('target_object_id', models.CharField(blank=True, default='0', max_length=255)),
                ('object_type', models.CharField(choices=[('General', 'General'), ('Analysis', 'Analysis'), ('Analysis_Comparison', 'Analysis Comparison'), ('Lca_Database', 'LCA Database'), ('Lca_Database_Process', 'LCA Process (Database)'), ('Instance_Idemat_Database_Process', 'LCA Process (Instance)')], default='ROWS', max_length=32, verbose_name='Issued Object')),
                ('issue_type', models.CharField(choices=[('FEATURE', 'Feature (Improvement Proposal'), ('BUG', 'Bug (result is wrong or something is not working as expected)'), ('DATABASE', 'Database (my job appears to be corrupted)'), ('LCA_DATABASE', 'LCA Database (request for new databases and processes)'), ('ARBITRARY', 'Arbitrary')], default='ROWS', max_length=32, verbose_name='Issue Type')),
                ('target_url', models.CharField(default='ROWS', max_length=500, verbose_name='Issued URL')),
                ('notes', models.TextField(blank=True, help_text='Issue Description', max_length=2000, null=True, verbose_name='Issue Description')),
                ('email', models.EmailField(max_length=254)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='EcoMan.projectuser_ecoman_ref')),
                ('project_model', models.ForeignKey(blank=True, default=None, help_text='Select a a project for TICKET', on_delete=django.db.models.deletion.CASCADE, to='EcoMan.project_ecoman_ref', verbose_name='Project')),
            ],
        ),
        migrations.CreateModel(
            name='Lca_Property',
            fields=[
                ('id', models.CharField(default=website.generate_pk.generate_pk, max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name For Python Usage')),
                ('verbose_name', models.CharField(default='Not defined', max_length=100, verbose_name='Name For Humanoids')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('note', models.CharField(default='Put your import comment here...', max_length=1000)),
                ('source', models.CharField(blank=True, default='Note', max_length=1000)),
                ('unit', models.CharField(default='-', max_length=50)),
                ('prop_type', models.CharField(choices=[('CORE', 'LCA Core Property'), ('USER', 'LCA User Property')], default='CORE', max_length=32)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='EcoMan.projectuser_ecoman_ref')),
            ],
        ),
        migrations.CreateModel(
            name='Lca_Part',
            fields=[
                ('id', models.CharField(default=website.generate_pk.generate_pk, max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, default='Not defined', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('multiplier', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Number of part instances')),
                ('color', models.CharField(default=EcoMan.scripts.colors.get_random_color, max_length=7)),
                ('notes', models.CharField(blank=True, default='Not defined', max_length=600)),
                ('istemplate', models.BooleanField(default=False, verbose_name='Visible As Template')),
                ('vehicle_weight_participation', models.CharField(choices=[('INCLUDED', 'Part Weight included in Target Vehicle Weight'), ('ADDED', 'Part Weight added to Target Vehicle Weight')], default='INCLUDED', max_length=32, verbose_name='Vehicle Weight Participation')),
                ('circularity_process_model', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='EcoMan.circularity_process', verbose_name='Model for Circularity (ReUse)')),
                ('lca_process_model', models.ManyToManyField(blank=True, related_name='%(class)s_instance', to='EcoMan.instance_idemat_database_process', verbose_name='LCA processes')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='EcoMan.projectuser_ecoman_ref')),
                ('part_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ConceptMan.part')),
                ('project_model', models.ForeignKey(blank=True, default=None, help_text='Select a a project for part', on_delete=django.db.models.deletion.CASCADE, to='EcoMan.project_ecoman_ref', verbose_name='Project')),
            ],
        ),
        migrations.CreateModel(
            name='Lca_Database_Subgroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=2, validators=[django.core.validators.MinLengthValidator(3)])),
                ('name', models.CharField(default='Not defined', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.CharField(blank=True, default='Put your comment here...', max_length=100)),
                ('group_model', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='EcoMan.lca_database_group', verbose_name='Group of the Subgroup')),
            ],
        ),
        migrations.CreateModel(
            name='Lca_Database_Process',
            fields=[
                ('id', models.CharField(default=website.generate_pk.generate_pk, max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=1000, null=True)),
                ('name_DE', models.CharField(blank=True, max_length=1000, null=True)),
                ('idemat_id', models.CharField(blank=True, max_length=30, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accessibility', models.CharField(choices=[('PRIVATE', 'Private'), ('DATABASE_USERS', 'Database Users')], default='private', max_length=50)),
                ('process_id', models.CharField(blank=True, max_length=30, null=True)),
                ('unit', models.CharField(choices=[('kg', 'Kilogram [kg]'), ('m', 'Meter [m]'), ('m2', 'Square metre [m2]'), ('m3', 'Cubic metre [m3]'), ('MJ', 'Megajoule [MJ]'), ('tkm', 'Tonne-kilometre [tkm]'), ('m3km', 'Cubic kilometre [m3km]'), ('s', '??????? [s]'), ('p', 'piece [p]')], max_length=50)),
                ('ec_total', models.FloatField(blank=True, default=0, null=True, verbose_name='Total Eco costs [euro]')),
                ('ec_of_human_health', models.FloatField(blank=True, default=0, null=True, verbose_name='Eco costs of human health [euro]')),
                ('ec_exo_toxicity', models.FloatField(blank=True, default=0, null=True, verbose_name='Eco costs of exo-toxicity [euro]')),
                ('ec_resource', models.FloatField(blank=True, default=0, null=True, verbose_name='Eco costs of carbon footprint [euro]')),
                ('ec_carbon', models.FloatField(blank=True, default=0, null=True, verbose_name='Eco costs of carbon footprint [euro]')),
                ('carbon_footprint', models.FloatField(blank=True, default=0, null=True, verbose_name='Carbon Footprint [kg CO2 equiv.]')),
                ('ced_total', models.FloatField(blank=True, default=0, null=True, verbose_name='CED Total [MJ]')),
                ('recipe2016_endpoint', models.FloatField(blank=True, default=0, null=True, verbose_name='ReCiPe2016 endpoint (pt) [World(2010) H/A]')),
                ('recipe_human_health', models.FloatField(blank=True, default=0, null=True, verbose_name='ReCiPe human health [H            DALY]')),
                ('recipe_eco_toxicity', models.FloatField(blank=True, default=0, null=True, verbose_name='ReCiPe ectoxicity [H            DALY]')),
                ('recipe_resources', models.FloatField(blank=True, default=0, null=True, verbose_name='ReCiPe resources [H     USD2013]')),
                ('environmental_footprint', models.FloatField(blank=True, default=0, null=True, verbose_name='Environm Footprint [Total          Pt]')),
                ('source', models.CharField(blank=True, default='Note', max_length=1000)),
                ('category_model', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='EcoMan.lca_database_category', verbose_name='Category')),
                ('database_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EcoMan.lca_database')),
                ('group_model', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='EcoMan.lca_database_group', verbose_name='Group of the Category')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='EcoMan.projectuser_ecoman_ref')),
                ('subgroup_model', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='EcoMan.lca_database_subgroup', verbose_name='Subgroup of the Group')),
            ],
        ),
        migrations.AddField(
            model_name='lca_database',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='EcoMan.projectuser_ecoman_ref'),
        ),
        migrations.AddField(
            model_name='lca_database',
            name='projects',
            field=models.ManyToManyField(blank=True, default=None, help_text='Select one or more projects', to='EcoMan.project_ecoman_ref', verbose_name='Projects with access'),
        ),
        migrations.AddField(
            model_name='instance_idemat_database_process',
            name='calculation_model',
            field=models.OneToOneField(default=EcoMan.models.lca_database_process.on_create_default_process, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_calculation', to='EcoMan.lca_database_process'),
        ),
        migrations.AddField(
            model_name='instance_idemat_database_process',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='EcoMan.projectuser_ecoman_ref'),
        ),
        migrations.AddField(
            model_name='instance_idemat_database_process',
            name='process_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='EcoMan.lca_database_process'),
        ),
        migrations.AddField(
            model_name='instance_idemat_database_process',
            name='results_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_results', to='EcoMan.lca_database_process'),
        ),
        migrations.AddField(
            model_name='circularity_process',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='EcoMan.projectuser_ecoman_ref'),
        ),
        migrations.CreateModel(
            name='Analysis_Settings',
            fields=[
                ('id', models.CharField(default=website.generate_pk.generate_pk, max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, default='Settings', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('protection_class', models.CharField(choices=[('PUBLIC', 'Public'), ('INTERNAL', 'Internal'), ('CONFIDENTIAL', 'Confidential'), ('STRICTLY_CONFIDENTIAL', 'Strictly Confidential')], default='CONFIDENTIAL', max_length=100, verbose_name='Report protection class')),
                ('is_public', models.BooleanField(default=False, verbose_name='Job will be visible for other colleagues within the same project')),
                ('is_playground', models.BooleanField(default=False, verbose_name='Left and right column for comparison')),
                ('include_upstream', models.BooleanField(default=True, verbose_name='Manufacturing Emissions includes upstream')),
                ('include_core', models.BooleanField(default=True, verbose_name='Manufacturing Emissions includes core')),
                ('include_downstream', models.BooleanField(default=True, verbose_name='Manufacturing Emissions includes downstrem')),
                ('include_circularity', models.BooleanField(default=True, verbose_name='Manufacturing Emissions includes circularity')),
                ('include_utilisation', models.BooleanField(default=True, verbose_name='Manufacturing Emissions includes vehicle utilisation')),
                ('report_include_object_ids', models.BooleanField(default=True, verbose_name='Report includes object IDs')),
                ('report_include_title_and_summ_pages', models.BooleanField(default=True, verbose_name='Report includes title and summary page')),
                ('report_include_part_list_pages', models.BooleanField(default=True, verbose_name='Report includes detailed parts lists')),
                ('report_include_processes_list_pages', models.BooleanField(default=True, verbose_name='Report includes detailed process lists')),
                ('report_include_goal_definition', models.BooleanField(default=True, verbose_name='Report includes decription of goal definition')),
                ('report_include_scope_definition', models.BooleanField(default=True, verbose_name='Report includes description of scope definition')),
                ('report_is_anonymized', models.BooleanField(default=True, verbose_name='User personal id visible')),
                ('process_visualisation', models.CharField(choices=[('ROWS', 'Expandable Menus'), ('ICONS', 'Icons')], default='ROWS', max_length=32, verbose_name='Processes Visualisation Style')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='EcoMan.projectuser_ecoman_ref')),
                ('primary_property', models.ForeignKey(default=EcoMan.models.lca_property.Lca_Property.get_default_pk, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='%(class)s_primary', to='EcoMan.lca_property', verbose_name='Primary Property Of Interest')),
                ('secondary_properties', models.ManyToManyField(blank=True, related_name='%(class)s_secondary', to='EcoMan.lca_property', verbose_name='Secondary Properties of Interst')),
            ],
        ),
        migrations.CreateModel(
            name='Analysis_Comparison',
            fields=[
                ('id', models.CharField(default=website.generate_pk.generate_pk, max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, default='No Name', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('protection_class', models.CharField(choices=[('PUBLIC', 'Public'), ('INTERNAL', 'Internal'), ('CONFIDENTIAL', 'Confidential'), ('STRICTLY_CONFIDENTIAL', 'Strictly Confidential')], default='CONFIDENTIAL', max_length=100, verbose_name='Report protection class')),
                ('emissions_manufacturing_including_reuse', models.BooleanField(default=False, verbose_name='Manufacturing Emissions includes reusability')),
                ('logo', models.CharField(default='Default Analysis Comparison Logo', max_length=1000)),
                ('goal_definition', models.CharField(blank=True, default='Not defined', max_length=600)),
                ('scope_definition', models.CharField(blank=True, default='Not defined', max_length=600)),
                ('last_import_document', models.FileField(blank=True, null=True, upload_to='documents/', verbose_name='Import analysis comparison from JSON file')),
                ('analysis_left', models.ForeignKey(blank=True, help_text='Select an analysis for comparsion', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_Left', to='EcoMan.analysis', verbose_name='Compared Left Analysis')),
                ('analysis_right', models.ForeignKey(blank=True, help_text='Select an analysis for comparsion', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_Right', to='EcoMan.analysis', verbose_name='Compared Right Analysis')),
                ('analysis_settings', models.OneToOneField(default=EcoMan.models.analysis_settings.on_create_default_settings, help_text='Create Analysis Comparison settings', on_delete=django.db.models.deletion.CASCADE, to='EcoMan.analysis_settings', verbose_name='Settings')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='EcoMan.projectuser_ecoman_ref')),
                ('primary_property', models.ForeignKey(default=EcoMan.models.lca_property.Lca_Property.get_default_pk, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='%(class)s_primary', to='EcoMan.lca_property', verbose_name='Primary Property Of Interest')),
                ('project_model', models.ForeignKey(blank=True, default=None, help_text='Select a a project for analysis', on_delete=django.db.models.deletion.CASCADE, to='EcoMan.project_ecoman_ref', verbose_name='Project')),
                ('secondary_properties', models.ManyToManyField(blank=True, related_name='%(class)s_secondary', to='EcoMan.lca_property', verbose_name='Secondary Properties of Interst')),
                ('utilisation_instance_model', models.ManyToManyField(blank=True, to='EcoMan.utilisation_process', verbose_name='Utilisations processes')),
            ],
        ),
        migrations.AddField(
            model_name='analysis',
            name='analysis_settings',
            field=models.OneToOneField(default=EcoMan.models.analysis_settings.on_create_default_settings, help_text='Create Analysis Comparison settings', on_delete=django.db.models.deletion.CASCADE, to='EcoMan.analysis_settings', verbose_name='Settings'),
        ),
        migrations.AddField(
            model_name='analysis',
            name='concept_model',
            field=models.ForeignKey(blank=True, help_text='Select a concept for analysis', null=True, on_delete=django.db.models.deletion.CASCADE, to='ConceptMan.concept', verbose_name='Analysed Concept'),
        ),
        migrations.AddField(
            model_name='analysis',
            name='lca_part_models',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_Upstream', to='EcoMan.lca_part', verbose_name='LCA Parts'),
        ),
        migrations.AddField(
            model_name='analysis',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='EcoMan.projectuser_ecoman_ref'),
        ),
        migrations.AddField(
            model_name='analysis',
            name='primary_property',
            field=models.ForeignKey(default=EcoMan.models.lca_property.Lca_Property.get_default_pk, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='%(class)s_primary', to='EcoMan.lca_property', verbose_name='Primary Property Of Interest'),
        ),
        migrations.AddField(
            model_name='analysis',
            name='project_model',
            field=models.ForeignKey(blank=True, default=None, help_text='Select a a project for analysis', on_delete=django.db.models.deletion.CASCADE, to='EcoMan.project_ecoman_ref', verbose_name='Project'),
        ),
        migrations.AddField(
            model_name='analysis',
            name='secondary_properties',
            field=models.ManyToManyField(blank=True, related_name='%(class)s_secondary', to='EcoMan.lca_property', verbose_name='Secondary Properties of Interst'),
        ),
    ]
