# Generated by Django 4.2.7 on 2023-11-21 12:39

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid
import website.generate_pk


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('NormMan', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Energy_Source',
            fields=[
                ('id', models.CharField(default=website.generate_pk.generate_pk, max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, default='Not defined', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.CharField(blank=True, default='Put your comment here...', max_length=100)),
                ('energysource_1', models.CharField(choices=[('ES1', 'Electricity'), ('ES2', 'Petrol'), ('ES3', 'Diesel'), ('ES4', 'Gray Hydrogen'), ('ES5', 'Blue Hydrogen'), ('ES6', 'Green Hydrogen'), ('ES7', 'CNG'), ('ES8', 'LNG'), ('ES10', 'None')], default='ES2', max_length=32)),
                ('energysource_2', models.CharField(choices=[('ES1', 'Electricity'), ('ES2', 'Petrol'), ('ES3', 'Diesel'), ('ES4', 'Gray Hydrogen'), ('ES5', 'Blue Hydrogen'), ('ES6', 'Green Hydrogen'), ('ES7', 'CNG'), ('ES8', 'LNG'), ('ES10', 'None')], default='ES2', max_length=32)),
                ('utilisation_ratio_source_1', models.DecimalField(decimal_places=0, default=Decimal('100'), max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name="Energy source use ratio '%'")),
                ('utilisation_ratio_source_2', models.DecimalField(decimal_places=0, default=Decimal('100'), max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name="Energy source use ratio '%'")),
                ('estimated_fuel_consumption_source_1', models.FloatField(blank=True, default=0, null=True, verbose_name='Estimated Fuel Consumption [l/100km]')),
                ('estimated_fuel_consumption_source_2', models.FloatField(blank=True, default=0, null=True, verbose_name='Estimated Fuel Consumption [l/100km]')),
                ('estimated_energy_consumption_source_1', models.FloatField(blank=True, default=0, null=True, verbose_name='Estimated Energy Consumption [kWh/100km]')),
                ('estimated_energy_consumption_source_2', models.FloatField(blank=True, default=0, null=True, verbose_name='Estimated Energy Consumption [kWh/100km]')),
                ('battery_type_source_1', models.CharField(blank=True, choices=[('BAT1', 'NMC'), ('BAT2', 'NiMH'), ('BAT3', 'LiFePo4'), ('BAT4', 'LiCoO2')], default='BAT1', max_length=32, null=True)),
                ('battery_capacity_source_1', models.FloatField(blank=True, null=True, verbose_name='Battery Capacity [kWh]')),
                ('battery_weight_source_1', models.FloatField(blank=True, null=True, verbose_name='Battery Weight [kg]')),
                ('battery_type_source_2', models.CharField(blank=True, choices=[('BAT1', 'NMC'), ('BAT2', 'NiMH'), ('BAT3', 'LiFePo4'), ('BAT4', 'LiCoO2')], default='BAT1', max_length=32, null=True)),
                ('battery_capacity_source_2', models.FloatField(blank=True, null=True, verbose_name='Battery Capacity [kWh]')),
                ('battery_weight_source_2', models.FloatField(blank=True, null=True, verbose_name='Battery Weight [kg]')),
                ('capacity_source_1', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Source capacity [l]')),
                ('capacity_source_2', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Source capacity [l]')),
                ('engwp_source_1', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Global Warming Potential Primary Source [kg] (Co2 equivalent)')),
                ('engwp_source_2', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Global Warming Potential Secondary Source [kg] (Co2 equivalent)')),
                ('engwpperkm', models.FloatField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Global Warming Potential [kg/km] (Co2 equivalent)')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Production_Rate',
            fields=[
                ('id', models.CharField(default=website.generate_pk.generate_pk, max_length=255, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, default='Not defined', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.CharField(blank=True, default='Put your comment here...', max_length=100)),
                ('production_time', models.IntegerField(blank=True, default=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Production Time [-] (years)')),
                ('production_rate_start', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Production Rate at the Start of the Production [-] (units/year)')),
                ('production_rate_end', models.IntegerField(blank=True, default=100000, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Production Rate at the End of the Production [-] (units/year)')),
                ('production_rate_extremum_y', models.IntegerField(blank=True, default=150000, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Min or Max Production Rate for Quadratic Model [-] (units/year)')),
                ('production_rate_extremum_x', models.IntegerField(blank=True, default=3, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Year of Min Max Production [-] (year)')),
                ('approximation_model', models.CharField(choices=[('FLAT', 'Flat'), ('LINEAR', 'Linear'), ('QUADRATIC', 'Quadratic')], default='FLAT', max_length=32)),
                ('produced_units', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Total Manufactured Units')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('UUID', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='UUID')),
                ('name', models.CharField(default='DUMMY_PROJECT', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='uploads/', verbose_name='Project Image')),
                ('network_number', models.IntegerField()),
                ('project_manager', models.CharField(blank=True, default='Name, Surname', max_length=100)),
                ('isusersandbox', models.BooleanField(default=False)),
                ('protection_class', models.CharField(choices=[('PUBLIC', 'Public'), ('INTERNAL', 'Internal'), ('CONFIDENTIAL', 'Confidential'), ('STRICTLY_CONFIDENTIAL', 'Strictly Confidential')], default='CONFIDENTIAL', max_length=100, verbose_name='Processes Visualisation Style')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('UUID', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='UUID')),
                ('name', models.CharField(blank=True, default='DUMMY_CAR', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('logo', models.CharField(default='Default Vehicle Logo', max_length=1000)),
                ('is_favorite', models.BooleanField(default=False)),
                ('target_weight', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Target Weight (kg)')),
                ('estimated_weight', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Estmated Weight (kg)')),
                ('life_distance_in_km', models.IntegerField(default=250000, verbose_name='Vehicle Lifetime Distance [km]')),
                ('life_time_in_years', models.IntegerField(default=10, verbose_name='Vehicle Lifetime [-] (years)')),
                ('vehicle_classification', models.CharField(choices=[('CLASS1', 'Class 1 - City Car (Example: VW UP!)'), ('CLASS2', 'Class 2 - Supermini (Example: VW Polo)'), ('CLASS3', 'Class 3 - Small Family Car (Example VW Golf)'), ('CLASS4', 'Class 4 - Compact Executive (Example: VW Passat)'), ('CLASS5', 'Class 5 - Executive Car (Example: MB E-class)'), ('CLASS6', 'Class 6 - Luxury Saloon (Example: MB S-class)'), ('CLASS7', 'Class 7 - Light Goods Transport (Example: VW Caddy)'), ('CLASS8', 'Class 8 - Medium Good Transport (Example: VW Transporter)'), ('CLASS9', 'Class 9 - Heavy Goods Transport (Example: VW Crafter)'), ('CLASS10', 'Class 10 - Mini SUV (Example: Opel Mokka)'), ('CLASS11', 'Class 11 - Small family SUV (Example Audi Q3)'), ('CLASS12', 'Class 12 - Large family SUV'), ('CLASS13', 'Class 13 - Executive SUV'), ('CLASS14', 'Class 14 - Small MPV'), ('CLASS15', 'Class 15 - Medium MPV'), ('CLASS16', 'Class 16 - Large MPV'), ('CLASS17', 'Class 17 - Light Trucks'), ('CLASS18', 'Class 18 - Heavy Trucks')], default='CLASS2', max_length=32)),
                ('energy_source_model', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='website.energy_source', verbose_name='Model for primary and secondary energy source')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('production_rate_model', models.OneToOneField(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='website.production_rate', verbose_name='Model for production rate')),
                ('project', models.ForeignKey(blank=True, help_text='Select a Project for this vehicle', null=True, on_delete=django.db.models.deletion.CASCADE, to='website.project')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('online', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_Owner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectUser',
            fields=[
                ('UUID', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='UUID')),
                ('logo', models.CharField(default='Default Project Logo', max_length=1000)),
                ('framework_connected', models.BooleanField(default=False)),
                ('catia_connected', models.BooleanField(default=False)),
                ('framework_update', models.BooleanField(default=False)),
                ('authorised_projects', models.ManyToManyField(blank=True, related_name='%(class)s_auth', to='website.project', verbose_name='Authorised Projects ')),
                ('current_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='website.project')),
                ('current_workflow_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='NormMan.workflow_session')),
                ('sandbox_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_sandbox', to='website.project')),
                ('sandbox_vehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='website.vehicle')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=512)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.room')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
